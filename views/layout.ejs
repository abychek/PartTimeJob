<!DOCTYPE html>
<html>
<head>
  <title>New Sails App</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.bootstrap)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->


  <!--STYLES-->
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-theme.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-theme.min.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap.min.css">
  <!--STYLES END-->

  <!--SCRIPTS-->
  <script src="/js/dependencies/sails.io.js"></script>
  <script src="/js/dependencies/jquery-2.1.4.min.js"></script>
  <script src="/js/bootstrap/affix.js"></script>
  <script src="/js/bootstrap/alert.js"></script>
  <script src="/js/bootstrap/bootstrap.js"></script>
  <script src="/js/bootstrap/bootstrap.min.js"></script>
  <script src="/js/bootstrap/button.js"></script>
  <script src="/js/bootstrap/carousel.js"></script>
  <script src="/js/bootstrap/collapse.js"></script>
  <script src="/js/bootstrap/dropdown.js"></script>
  <script src="/js/bootstrap/modal.js"></script>
  <script src="/js/bootstrap/popover.js"></script>
  <script src="/js/bootstrap/scrollspy.js"></script>
  <script src="/js/bootstrap/tab.js"></script>
  <script src="/js/bootstrap/tooltip.js"></script>
  <script src="/js/bootstrap/transition.js"></script>
  <!--SCRIPTS END-->

</head>

<body style="background-color: lightgrey">

<div id="header">
  <nav class="navbar navbar-default">
    <div class="container-fluid">
      <!-- Brand and toggle get grouped for better mobile display -->
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse"
                data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand" href="/">Brand</a>
      </div>

      <% if(session.authenticated){ %>
      <!-- Collect the nav links, forms, and other content for toggling -->

      <form id="notification_remove" method="post" action="/notifications"></form>

      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav">
          <li><a href="/tasks">Tasks</a></li>
          <li><a href="/contracts">Contracts </a></li>
        </ul>

        <ul class="nav navbar-nav navbar-right">
          <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button"
               aria-haspopup="true"
               aria-expanded="false"><span class="glyphicon glyphicon-envelope"></span><span
                id="notificationCounter"></span></a>
            <ul id="notificationBody" class="dropdown-menu">

            </ul>
          </li>
          <script>
            io.socket.get('/notifications', function (resData) {
              $("#notificationCounter").attr("class", 'badge').html(resData.length);
              for (var i = 0; i < resData.length; i++) {
                $("#notificationBody").append("<li id='notification' onclick='removeNotification(" + resData[i].id + ");'>" +
                  "<div class='bg-info text-primary' role='alert'>" + resData[i].title + "</div>" +
                  "</li>"+
                  "<li >"
                )
              }
            });

            function removeNotification(identifier) {
              $.post('/notifications/hide', {id: identifier});
            }
          </script>
          <li class="dropdown">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true"
               aria-expanded="false"><span class="glyphicon glyphicon-user"></span><span class="caret"></span></a>
            <ul class="dropdown-menu">
              <li><a href="/user">Edit my profile</a></li>
              <li role="separator" class="divider"></li>
              <li><a href="/logout">Logout</a></li>
            </ul>
          </li>
        </ul>
      </div>
      <!-- /.navbar-collapse -->
      <% }else{ %>
      <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
        <ul class="nav navbar-nav navbar-right">
          <li><a href="/login"><span class="glyphicon glyphicon-log-in"></span></a></li>
        </ul>
      </div>
      <% } %>
    </div>
    <!-- /.container-fluid -->
  </nav>
</div>

<div id="body" class="container-fluid">
  <div class="row">
    <%- body %>
  </div>
</div>

<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->


</body>
</html>
